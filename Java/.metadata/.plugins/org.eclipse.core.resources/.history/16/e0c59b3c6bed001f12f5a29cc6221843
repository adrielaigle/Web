package avl;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Test;

class teste {
	//1-inserções simples que não requeiram balanceamento (0,5)
	@Test
	void test() {
	AVL avl = new AVL(10);
	avl.insere(5);
	avl.insere(16);
	avl.insere(1);
	avl.insere(12);
	avl.insere(20);
	assertEquals(&quot;10(0)5(1)1(0)16(0)12(0)20(0)&quot;,avl.preOrdem().replace(&quot; &quot;, &quot;&quot;).replace(&quot;,&quot;, &quot;&quot;));
	}
	//2-remoção de nó sem filhos (0,5)
	@Test
	void test2() {
	AVL avl = new AVL(10);
	avl.insere(5);
	avl.insere(16);
	avl.insere(1);
	avl.insere(12);
	avl.insere(20);
	avl.remove(12);
	assertEquals(&quot;10(0)5(1)1(0)16(-1)20(0)&quot;,avl.preOrdem().replace(&quot; &quot;, &quot;&quot;).replace(&quot;,&quot;, &quot;&quot;));
	}
	//3-remoção de nó com 1 filho à direita (0,5)
	@Test
	void test3() {
	AVL avl = new AVL(10);
	avl.insere(5);
	avl.insere(16);
	avl.insere(7);
	avl.insere(12);
	avl.insere(20);
	avl.remove(5);
	assertEquals(&quot;10(-1)7(0)16(0)12(0)20(0)&quot;,avl.preOrdem().replace(&quot; &quot;, &quot;&quot;).replace(&quot;,&quot;, &quot;&quot;));
	}
	//4-remoção de nó com 1 filho à esquerda (0,5)
	@Test
	void test4() {
	AVL avl = new AVL(10);
	avl.insere(5);
	avl.insere(16);
	avl.insere(1);
	avl.insere(12);
	avl.insere(20);
	avl.remove(5);
	assertEquals(&quot;10(-1)1(0)16(0)12(0)20(0)&quot;,avl.preOrdem().replace(&quot; &quot;, &quot;&quot;).replace(&quot;,&quot;, &quot;&quot;));
	}

	//5-remoção de nó com 2 filhos, e que seja um filho à direita (0,5)
	@Test
	void test5() {
	AVL avl = new AVL(10);
	avl.insere(5);
	avl.insere(16);
	avl.insere(1);
	avl.insere(12);
	avl.insere(20);
	avl.remove(16);
	assertEquals(&quot;10(0)5(1)1(0)20(1)12(0)&quot;,avl.preOrdem().replace(&quot; &quot;, &quot;&quot;).replace(&quot;,&quot;, &quot;&quot;));
	}
	}
